<?php

namespace Tests\Unit\Services\Transaction;

use App\Entities\Funds;
use App\Models\Transaction;
use App\Models\User;
use App\Services\Account\CheckAccountBalanceService;
use App\Services\Transaction\CreateTransactionService;
use Tests\TestCase;
use App\Entities\Account;
use Illuminate\Foundation\Testing\RefreshDatabase;

class CreateTransactionServiceTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var Account
     */
    protected Account $sender;

    /**
     * @var \App\Models\Currency
     */
    protected \App\Models\Currency $currency;

    /**
     * @var Account
     */
    protected Account $recipient;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->sender = User::factory()->create()->account()->create()->toEntity();
        $this->recipient = User::factory()->create()->account()->create()->toEntity();
        $this->currency = \App\Models\Currency::create([
            'name' => 'Bitcoin',
            'ticker' => 'BTC'
        ]);
    }

    public function test_create_success_transaction()
    {
        $transactionServiceSender = new CheckAccountBalanceService($this->sender, $this->currency->toEntity());
        Transaction::create([
            'sender_id' => 0,
            'recipient_id' => 1,
            'amount' => 1000,
            'currency_id' => 1
        ]);

        $this->assertEquals(1000, $transactionServiceSender->getBalance());

        $funds = new Funds($this->currency->toEntity(), 100);
        (new CreateTransactionService($this->sender, $this->recipient, $funds))->commit();

        $this->assertEquals(900, $transactionServiceSender->getBalance());

        $transactionServiceRecipient = new CheckAccountBalanceService($this->recipient, $this->currency->toEntity());
        $this->assertEquals(100, $transactionServiceRecipient->getBalance());
    }
}
